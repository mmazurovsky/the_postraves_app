// Mocks generated by Mockito 5.0.15 from annotations
// in the_postraves_app/integration_test/app_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i9;

import 'package:bloc/bloc.dart' as _i11;
import 'package:firebase_auth/firebase_auth.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:the_postraves_app/src/common/authentication/repository/firebase_auth_repository.dart'
    as _i7;
import 'package:the_postraves_app/src/common/geo_repository/city_local_repository.dart'
    as _i5;
import 'package:the_postraves_app/src/features/profile/state/profile_cubit/profile_cubit.dart'
    as _i3;
import 'package:the_postraves_package/client/response_sealed.dart' as _i2;
import 'package:the_postraves_package/models/geo/city.dart' as _i6;
import 'package:the_postraves_package/models/user/user_profile_to_write.dart'
    as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResponseSealed_0<DATA> extends _i1.Fake
    implements _i2.ResponseSealed<DATA> {}

class _FakeProfileState_1 extends _i1.Fake implements _i3.ProfileState {}

class _FakeStreamSubscription_2<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

/// A class which mocks [CityLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCityLocalRepository extends _i1.Mock
    implements _i5.CityLocalRepository {
  MockCityLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ResponseSealed<List<_i6.City>>> fetchCitiesFromLocal() =>
      (super.noSuchMethod(Invocation.method(#fetchCitiesFromLocal, []),
              returnValue: Future<_i2.ResponseSealed<List<_i6.City>>>.value(
                  _FakeResponseSealed_0<List<_i6.City>>()))
          as _i4.Future<_i2.ResponseSealed<List<_i6.City>>>);
  @override
  _i4.Future<_i2.ResponseSealed<_i6.City?>> fetchCurrentCityFromLocal() =>
      (super.noSuchMethod(Invocation.method(#fetchCurrentCityFromLocal, []),
              returnValue: Future<_i2.ResponseSealed<_i6.City?>>.value(
                  _FakeResponseSealed_0<_i6.City?>()))
          as _i4.Future<_i2.ResponseSealed<_i6.City?>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> saveCitiesToLocalAndDeletePrevious(
          List<_i6.City>? cities) =>
      (super.noSuchMethod(
              Invocation.method(#saveCitiesToLocalAndDeletePrevious, [cities]),
              returnValue: Future<_i2.ResponseSealed<void>>.value(
                  _FakeResponseSealed_0<void>()))
          as _i4.Future<_i2.ResponseSealed<void>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> saveCurrentCityToLocalAndDeletePrevious(
          _i6.City? city) =>
      (super.noSuchMethod(
          Invocation.method(#saveCurrentCityToLocalAndDeletePrevious, [city]),
          returnValue: Future<_i2.ResponseSealed<void>>.value(
              _FakeResponseSealed_0<void>())) as _i4
          .Future<_i2.ResponseSealed<void>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> removeCurrentCityFromLocal() =>
      (super.noSuchMethod(Invocation.method(#removeCurrentCityFromLocal, []),
              returnValue: Future<_i2.ResponseSealed<void>>.value(
                  _FakeResponseSealed_0<void>()))
          as _i4.Future<_i2.ResponseSealed<void>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> removeCitiesFromLocal() =>
      (super.noSuchMethod(Invocation.method(#removeCitiesFromLocal, []),
              returnValue: Future<_i2.ResponseSealed<void>>.value(
                  _FakeResponseSealed_0<void>()))
          as _i4.Future<_i2.ResponseSealed<void>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FirebaseAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuthRepository extends _i1.Mock
    implements _i7.FirebaseAuthRepository {
  MockFirebaseAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i8.User?> get userStream =>
      (super.noSuchMethod(Invocation.getter(#userStream),
          returnValue: Stream<_i8.User?>.empty()) as _i4.Stream<_i8.User?>);
  @override
  _i4.Future<_i2.ResponseSealed<_i8.UserCredential>> signUpWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signUpWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue: Future<_i2.ResponseSealed<_i8.UserCredential>>.value(
                  _FakeResponseSealed_0<_i8.UserCredential>()))
          as _i4.Future<_i2.ResponseSealed<_i8.UserCredential>>);
  @override
  _i4.Future<_i2.ResponseSealed<_i8.UserCredential>> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue: Future<_i2.ResponseSealed<_i8.UserCredential>>.value(
                  _FakeResponseSealed_0<_i8.UserCredential>()))
          as _i4.Future<_i2.ResponseSealed<_i8.UserCredential>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> startSigningWithEmailAndLink(
          {String? email}) =>
      (super.noSuchMethod(
          Invocation.method(#startSigningWithEmailAndLink, [], {#email: email}),
          returnValue: Future<_i2.ResponseSealed<void>>.value(
              _FakeResponseSealed_0<void>())) as _i4
          .Future<_i2.ResponseSealed<void>>);
  @override
  _i4.Future<_i2.ResponseSealed<_i8.UserCredential>> endSigningWithEmailAndLink(
          {Uri? link}) =>
      (super.noSuchMethod(
              Invocation.method(#endSigningWithEmailAndLink, [], {#link: link}),
              returnValue: Future<_i2.ResponseSealed<_i8.UserCredential>>.value(
                  _FakeResponseSealed_0<_i8.UserCredential>()))
          as _i4.Future<_i2.ResponseSealed<_i8.UserCredential>>);
  @override
  _i4.Future<_i2.ResponseSealed<_i8.UserCredential>> signInWithGoogle() =>
      (super.noSuchMethod(Invocation.method(#signInWithGoogle, []),
              returnValue: Future<_i2.ResponseSealed<_i8.UserCredential>>.value(
                  _FakeResponseSealed_0<_i8.UserCredential>()))
          as _i4.Future<_i2.ResponseSealed<_i8.UserCredential>>);
  @override
  _i4.Future<_i2.ResponseSealed<_i8.UserCredential>> signInWithApple() =>
      (super.noSuchMethod(Invocation.method(#signInWithApple, []),
              returnValue: Future<_i2.ResponseSealed<_i8.UserCredential>>.value(
                  _FakeResponseSealed_0<_i8.UserCredential>()))
          as _i4.Future<_i2.ResponseSealed<_i8.UserCredential>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i2.ResponseSealed<void>>.value(
                  _FakeResponseSealed_0<void>()))
          as _i4.Future<_i2.ResponseSealed<void>>);
  @override
  _i4.Future<_i2.ResponseSealed<void>> deleteMyProfile() =>
      (super.noSuchMethod(Invocation.method(#deleteMyProfile, []),
              returnValue: Future<_i2.ResponseSealed<void>>.value(
                  _FakeResponseSealed_0<void>()))
          as _i4.Future<_i2.ResponseSealed<void>>);
  @override
  bool isSignInWithEmailLink(String? link) =>
      (super.noSuchMethod(Invocation.method(#isSignInWithEmailLink, [link]),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ProfileCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileCubit extends _i1.Mock implements _i3.ProfileCubit {
  MockProfileCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.ProfileState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeProfileState_1()) as _i3.ProfileState);
  @override
  _i4.Stream<_i3.ProfileState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.ProfileState>.empty())
          as _i4.Stream<_i3.ProfileState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void createUserProfile(
          _i9.File? imageFile, String? nickname, _i6.City? currentCity) =>
      super.noSuchMethod(
          Invocation.method(
              #createUserProfile, [imageFile, nickname, currentCity]),
          returnValueForMissingStub: null);
  @override
  void updateWholeUserProfile(_i10.UserProfileToWrite? userProfileToUpdate,
          [_i9.File? imageFile]) =>
      super.noSuchMethod(
          Invocation.method(
              #updateWholeUserProfile, [userProfileToUpdate, imageFile]),
          returnValueForMissingStub: null);
  @override
  void updateOnlyCityInUserProfile(_i6.City? newCity) => super.noSuchMethod(
      Invocation.method(#updateOnlyCityInUserProfile, [newCity]),
      returnValueForMissingStub: null);
  @override
  _i4.Future<bool?> checkNicknameIsFree(String? nickname) =>
      (super.noSuchMethod(Invocation.method(#checkNicknameIsFree, [nickname]),
          returnValue: Future<bool?>.value()) as _i4.Future<bool?>);
  @override
  _i4.StreamSubscription<_i3.ProfileState> listen(
          void Function(_i3.ProfileState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_2<_i3.ProfileState>())
          as _i4.StreamSubscription<_i3.ProfileState>);
  @override
  void emit(_i3.ProfileState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i11.Change<_i3.ProfileState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
